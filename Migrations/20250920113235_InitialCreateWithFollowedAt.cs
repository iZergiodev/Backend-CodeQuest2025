using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeQuestBackend.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreateWithFollowedAt : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Check if tables exist and create them conditionally
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Create Categories table if it doesn't exist
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Categories') THEN
                        CREATE TABLE ""Categories"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Name"" character varying(50) NOT NULL,
                            ""Description"" character varying(500),
                            ""Color"" character varying(20),
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""UpdatedAt"" timestamp with time zone NOT NULL,
                            CONSTRAINT ""PK_Categories"" PRIMARY KEY (""Id"")
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Create Users table if it doesn't exist
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Users') THEN
                        CREATE TABLE ""Users"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Username"" text,
                            ""Password"" text,
                            ""Name"" text,
                            ""Email"" text NOT NULL,
                            ""Role"" text,
                            ""Avatar"" text,
                            ""Biography"" text,
                            ""BirthDate"" timestamp with time zone NOT NULL,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""StarDustPoints"" integer NOT NULL,
                            ""DiscordId"" text,
                            ""DiscordUsername"" text,
                            ""DiscordDiscriminator"" text,
                            ""DiscordAvatar"" text,
                            ""DiscordAccessToken"" text,
                            ""DiscordRefreshToken"" text,
                            ""DiscordTokenExpiresAt"" timestamp with time zone,
                            CONSTRAINT ""PK_Users"" PRIMARY KEY (""Id"")
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Create Subcategories table if it doesn't exist
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Subcategories') THEN
                        CREATE TABLE ""Subcategories"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Name"" character varying(50) NOT NULL,
                            ""Description"" character varying(500),
                            ""Color"" character varying(20),
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""UpdatedAt"" timestamp with time zone NOT NULL,
                            ""CategoryId"" integer NOT NULL,
                            CONSTRAINT ""PK_Subcategories"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Subcategories_Categories_CategoryId"" FOREIGN KEY (""CategoryId"") REFERENCES ""Categories"" (""Id"") ON DELETE CASCADE
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Create Posts table if it doesn't exist
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Posts') THEN
                        CREATE TABLE ""Posts"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Title"" character varying(200) NOT NULL,
                            ""Content"" text NOT NULL,
                            ""Summary"" character varying(500),
                            ""ImageUrl"" text,
                            ""Tags"" text[] NOT NULL,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""UpdatedAt"" timestamp with time zone NOT NULL,
                            ""AuthorId"" integer NOT NULL,
                            ""CategoryId"" integer,
                            ""SubcategoryId"" integer,
                            ""LikesCount"" integer NOT NULL,
                            ""CommentsCount"" integer NOT NULL,
                            ""VisitsCount"" integer NOT NULL,
                            ""PopularityScore"" double precision NOT NULL,
                            ""TrendingScore"" double precision NOT NULL,
                            ""LastActivityAt"" timestamp with time zone NOT NULL,
                            ""RecentLikesCount"" integer NOT NULL,
                            ""RecentCommentsCount"" integer NOT NULL,
                            ""RecentVisitsCount"" integer NOT NULL,
                            CONSTRAINT ""PK_Posts"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Posts_Categories_CategoryId"" FOREIGN KEY (""CategoryId"") REFERENCES ""Categories"" (""Id""),
                            CONSTRAINT ""FK_Posts_Subcategories_SubcategoryId"" FOREIGN KEY (""SubcategoryId"") REFERENCES ""Subcategories"" (""Id""),
                            CONSTRAINT ""FK_Posts_Users_AuthorId"" FOREIGN KEY (""AuthorId"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Create UserSubcategoryFollows table if it doesn't exist, or add FollowedAt column if it exists
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'UserSubcategoryFollows') THEN
                        CREATE TABLE ""UserSubcategoryFollows"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""UserId"" integer NOT NULL,
                            ""SubcategoryId"" integer NOT NULL,
                            ""FollowedAt"" timestamp with time zone NOT NULL DEFAULT NOW(),
                            CONSTRAINT ""PK_UserSubcategoryFollows"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_UserSubcategoryFollows_Subcategories_SubcategoryId"" FOREIGN KEY (""SubcategoryId"") REFERENCES ""Subcategories"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_UserSubcategoryFollows_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                        );
                    ELSE
                        -- Add FollowedAt column if it doesn't exist
                        IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'UserSubcategoryFollows' AND column_name = 'FollowedAt') THEN
                            ALTER TABLE ""UserSubcategoryFollows"" ADD COLUMN ""FollowedAt"" timestamp with time zone NOT NULL DEFAULT NOW();
                        END IF;
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Create other tables if they don't exist
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Bookmarks') THEN
                        CREATE TABLE ""Bookmarks"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""UserId"" integer NOT NULL,
                            ""PostId"" integer NOT NULL,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            CONSTRAINT ""PK_Bookmarks"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Bookmarks_Posts_PostId"" FOREIGN KEY (""PostId"") REFERENCES ""Posts"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_Bookmarks_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Comments') THEN
                        CREATE TABLE ""Comments"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""Content"" text NOT NULL,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""UpdatedAt"" timestamp with time zone NOT NULL,
                            ""PostId"" integer NOT NULL,
                            ""AuthorId"" integer NOT NULL,
                            CONSTRAINT ""PK_Comments"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Comments_Posts_PostId"" FOREIGN KEY (""PostId"") REFERENCES ""Posts"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_Comments_Users_AuthorId"" FOREIGN KEY (""AuthorId"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'EngagementEvents') THEN
                        CREATE TABLE ""EngagementEvents"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""PostId"" integer NOT NULL,
                            ""UserId"" integer NOT NULL,
                            ""Type"" integer NOT NULL,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            CONSTRAINT ""PK_EngagementEvents"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_EngagementEvents_Posts_PostId"" FOREIGN KEY (""PostId"") REFERENCES ""Posts"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_EngagementEvents_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Likes') THEN
                        CREATE TABLE ""Likes"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""PostId"" integer NOT NULL,
                            ""UserId"" integer NOT NULL,
                            CONSTRAINT ""PK_Likes"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Likes_Posts_PostId"" FOREIGN KEY (""PostId"") REFERENCES ""Posts"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_Likes_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Notifications') THEN
                        CREATE TABLE ""Notifications"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""UserId"" integer NOT NULL,
                            ""Type"" character varying(50) NOT NULL,
                            ""Title"" character varying(200) NOT NULL,
                            ""Message"" character varying(500) NOT NULL,
                            ""IsRead"" boolean NOT NULL,
                            ""RelatedPostId"" integer,
                            ""RelatedCommentId"" integer,
                            ""RelatedUserId"" integer,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            CONSTRAINT ""PK_Notifications"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Notifications_Comments_RelatedCommentId"" FOREIGN KEY (""RelatedCommentId"") REFERENCES ""Comments"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_Notifications_Posts_RelatedPostId"" FOREIGN KEY (""RelatedPostId"") REFERENCES ""Posts"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_Notifications_Users_RelatedUserId"" FOREIGN KEY (""RelatedUserId"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT,
                            CONSTRAINT ""FK_Notifications_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                        );
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'StarDustPointsHistory') THEN
                        CREATE TABLE ""StarDustPointsHistory"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""UserId"" integer NOT NULL,
                            ""Points"" integer NOT NULL,
                            ""Action"" character varying(100) NOT NULL,
                            ""Description"" character varying(500),
                            ""RelatedPostId"" integer,
                            ""RelatedCommentId"" integer,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            CONSTRAINT ""PK_StarDustPointsHistory"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_StarDustPointsHistory_Comments_RelatedCommentId"" FOREIGN KEY (""RelatedCommentId"") REFERENCES ""Comments"" (""Id"") ON DELETE SET NULL,
                            CONSTRAINT ""FK_StarDustPointsHistory_Posts_RelatedPostId"" FOREIGN KEY (""RelatedPostId"") REFERENCES ""Posts"" (""Id"") ON DELETE SET NULL,
                            CONSTRAINT ""FK_StarDustPointsHistory_Users_UserId"" FOREIGN KEY (""UserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                        );
                    END IF;
                END $$;");

            // Create indexes conditionally
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Bookmarks_PostId') THEN
                        CREATE INDEX ""IX_Bookmarks_PostId"" ON ""Bookmarks"" (""PostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Bookmarks_UserId_PostId') THEN
                        CREATE UNIQUE INDEX ""IX_Bookmarks_UserId_PostId"" ON ""Bookmarks"" (""UserId"", ""PostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Comments_AuthorId') THEN
                        CREATE INDEX ""IX_Comments_AuthorId"" ON ""Comments"" (""AuthorId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Comments_PostId') THEN
                        CREATE INDEX ""IX_Comments_PostId"" ON ""Comments"" (""PostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_EngagementEvents_PostId') THEN
                        CREATE INDEX ""IX_EngagementEvents_PostId"" ON ""EngagementEvents"" (""PostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_EngagementEvents_UserId_PostId_Type') THEN
                        CREATE UNIQUE INDEX ""IX_EngagementEvents_UserId_PostId_Type"" ON ""EngagementEvents"" (""UserId"", ""PostId"", ""Type"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Likes_PostId') THEN
                        CREATE INDEX ""IX_Likes_PostId"" ON ""Likes"" (""PostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Likes_UserId_PostId') THEN
                        CREATE UNIQUE INDEX ""IX_Likes_UserId_PostId"" ON ""Likes"" (""UserId"", ""PostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Notifications_RelatedCommentId') THEN
                        CREATE INDEX ""IX_Notifications_RelatedCommentId"" ON ""Notifications"" (""RelatedCommentId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Notifications_RelatedPostId') THEN
                        CREATE INDEX ""IX_Notifications_RelatedPostId"" ON ""Notifications"" (""RelatedPostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Notifications_RelatedUserId') THEN
                        CREATE INDEX ""IX_Notifications_RelatedUserId"" ON ""Notifications"" (""RelatedUserId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Notifications_UserId') THEN
                        CREATE INDEX ""IX_Notifications_UserId"" ON ""Notifications"" (""UserId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Posts_AuthorId') THEN
                        CREATE INDEX ""IX_Posts_AuthorId"" ON ""Posts"" (""AuthorId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Posts_CategoryId') THEN
                        CREATE INDEX ""IX_Posts_CategoryId"" ON ""Posts"" (""CategoryId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Posts_SubcategoryId') THEN
                        CREATE INDEX ""IX_Posts_SubcategoryId"" ON ""Posts"" (""SubcategoryId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_StarDustPointsHistory_RelatedCommentId') THEN
                        CREATE INDEX ""IX_StarDustPointsHistory_RelatedCommentId"" ON ""StarDustPointsHistory"" (""RelatedCommentId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_StarDustPointsHistory_RelatedPostId') THEN
                        CREATE INDEX ""IX_StarDustPointsHistory_RelatedPostId"" ON ""StarDustPointsHistory"" (""RelatedPostId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_StarDustPointsHistory_UserId') THEN
                        CREATE INDEX ""IX_StarDustPointsHistory_UserId"" ON ""StarDustPointsHistory"" (""UserId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Subcategories_CategoryId') THEN
                        CREATE INDEX ""IX_Subcategories_CategoryId"" ON ""Subcategories"" (""CategoryId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_UserSubcategoryFollows_SubcategoryId') THEN
                        CREATE INDEX ""IX_UserSubcategoryFollows_SubcategoryId"" ON ""UserSubcategoryFollows"" (""SubcategoryId"");
                    END IF;
                END $$;");

            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_UserSubcategoryFollows_UserId_SubcategoryId') THEN
                        CREATE UNIQUE INDEX ""IX_UserSubcategoryFollows_UserId_SubcategoryId"" ON ""UserSubcategoryFollows"" (""UserId"", ""SubcategoryId"");
                    END IF;
                END $$;");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(@"
                DO $$
                BEGIN
                    -- Drop tables if they exist
                    DROP TABLE IF EXISTS ""StarDustPointsHistory"";
                    DROP TABLE IF EXISTS ""Notifications"";
                    DROP TABLE IF EXISTS ""Likes"";
                    DROP TABLE IF EXISTS ""EngagementEvents"";
                    DROP TABLE IF EXISTS ""Comments"";
                    DROP TABLE IF EXISTS ""Bookmarks"";
                    DROP TABLE IF EXISTS ""UserSubcategoryFollows"";
                    DROP TABLE IF EXISTS ""Posts"";
                    DROP TABLE IF EXISTS ""Subcategories"";
                    DROP TABLE IF EXISTS ""Users"";
                    DROP TABLE IF EXISTS ""Categories"";
                END $$;");
        }
    }
}